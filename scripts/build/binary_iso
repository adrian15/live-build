#!/bin/sh

## live-build(7) - System Build Scripts
## Copyright (C) 2006-2015 Daniel Baumann <mail@daniel-baumann.ch>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.


set -e

# Including common functions
[ -e "${LIVE_BUILD}/scripts/build.sh" ] && . "${LIVE_BUILD}/scripts/build.sh" || . /usr/lib/live/build.sh

# Setting static variables
DESCRIPTION="$(Echo 'build iso binary image')"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffiles config/all config/common config/bootstrap config/chroot config/binary config/source
Set_defaults

case "${LIVE_IMAGE_TYPE}" in
	iso)
		IMAGE="${LIVE_IMAGE_NAME}-${LB_ARCHITECTURES}.iso"
		;;

	iso-hybrid)
		IMAGE="${LIVE_IMAGE_NAME}-${LB_ARCHITECTURES}.hybrid.iso"
		;;

	*)
		exit 0
		;;
esac

Echo_message "Begin building binary iso image..."

# Requiring stage file
Require_stagefile .build/config .build/bootstrap

# Checking stage file
Check_stagefile .build/binary_iso

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

# Checking depends
Check_package chroot /usr/bin/xorriso xorriso
Check_package chroot /usr/lib/ISOLINUX/isohdpfx.bin isolinux

# Restoring cache
Restore_cache cache/packages.binary

# Installing depends
Install_package

# Remove old iso image
if [ -f ${IMAGE} ]
then
	rm -f ${IMAGE}
fi

# Handle xorriso generic options
XORRISO_OPTIONS="-R -r -J -joliet-long -l -cache-inodes -iso-level 3"

# Handle xorriso live-build specific options
if [ "${LIVE_IMAGE_TYPE}" = "iso-hybrid" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -partition_offset 16"
fi

if [ "${_QUIET}" = "true" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -quiet"
fi

if [ "${_VERBOSE}" = "true" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -v"
fi

if [ -n "${LB_ISO_APPLICATION}" ] && [ "${LB_ISO_APPLICATION}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -A \"${LB_ISO_APPLICATION}\""
fi

if [ -n "${LB_ISO_PREPARER}" ] && [ "${LB_ISO_PREPARER}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -p \"${LB_ISO_PREPARER}\""
fi

if [ -n "${LB_ISO_PUBLISHER}" ] && [ "${LB_ISO_PUBLISHER}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -publisher \"${LB_ISO_PUBLISHER}\""
fi

if [ -n "${LB_ISO_VOLUME}" ] && [ "${LB_ISO_VOLUME}" != "none" ]
then
	XORRISO_OPTIONS="${XORRISO_OPTIONS} -V \"${LB_ISO_VOLUME}\""
fi

PRE_INCLUDE_XORRISO_OPTIONS="${XORRISO_OPTIONS}"

# Handle xorriso architecture specific options
[ -d "${LIVE_BUILD}" ] && INCLUDED_PATH="${LIVE_BUILD}/scripts/build" || INCLUDED_PATH="/usr/lib/live/build"
for ninclude_file in "${INCLUDED_PATH}"/include_*
do
	. "${ninclude_file}"
	${INCLUDED_PREFIX}_xorriso_first_bootloader_architecture_options
done

if [ "${PRE_INCLUDE_XORRISO_OPTIONS}" = "${XORRISO_OPTIONS}" ]
then
	Echo_warning "Bootloader on your architecture not yet supported by live-build as the primary bootloader."
	Echo_warning "This will produce a most likely not bootable image (Continuing in 5 seconds)."
	sleep 5
fi

for ninclude_file in "${INCLUDED_PATH}"/include_*
do
	. "${ninclude_file}"
	${INCLUDED_PREFIX}_xorriso_extra_bootloader_architecture_options
done

#if [ "${LB_DEBIAN_INSTALLER}" != "live" ]
#then
#	XORRISO_OPTIONS="${XORRISO_OPTIONS} -m ${XORRISO_EXCLUDE}"
#fi

echo "#!/bin/sh" > binary.sh

for ninclude_file in "${INCLUDED_PATH}"/include_*
do
	. "${ninclude_file}"
	${INCLUDED_PREFIX}_custom_additional_binary_top_script
done

cat >> binary.sh << EOF

xorriso -as mkisofs ${XORRISO_OPTIONS} -o ${IMAGE} binary
EOF

case "${LB_BUILD_WITH_CHROOT}" in
	true)
		# Moving image
		mv binary.sh chroot
		mv binary chroot

		Chroot chroot "sh binary.sh"

		# Move image
		mv chroot/binary chroot/${IMAGE} ./
		rm -f chroot/binary.sh
		;;

	false)
		sh binary.sh
		rm -f binary.sh
		;;
esac

# Saving cache
Save_cache cache/packages.binary

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .build/binary_iso
